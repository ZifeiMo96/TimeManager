
## 编码规范

### 1. 注释规范

C# 提供一种机制，使程序员可以使用含有 XML 文本的特殊注释语法为他们的代码编写文档。在源代码文件中，具有某种格式的注释可用于指导某个工具根据这些注释和它们后面的源代码元素生成 XML。使用这类语法的注释称为文档注释 (documentation comment)。这些注释后面必须紧跟用户定义类型（如类、委托或接口）或者成员（如字段、事件、属性或方法）。XML 生成工具称作文档生成器 (documentation generator)。（此生成器可以但不一定必须是 C# 编译器本身。）由文档生成器产生的输出称为文档文件 (documentation file)。文档文件可作为文档查看器 (documentation viewer) 的输入；文档查看器是用于生成类型信息及其关联文档的某种可视化显示的工具。

(1)模块(类)注释规范


///<summary>
         ///模块名：<直接类名即可>
         ///作用：<对此类的描述，可以引用系统设计中的描述>
         ///作者：作者中文名
         ///编写日期：<模块创建日期，格式：YYYY-MM-DD>
///</summary>


(2)类属性注释规范


///<summary>
         ///属性说明
///</summary>


(3)方法注释规范


///<summary>
         ///说明：<对该方法的说明>
        ///作者：<作者中文名>
///</summary>
///<param name="<参数名称>"><参数说明></param>
///<returns>
         ///<对方法返回值的说明，该说明必须明确说明返回的值代表什么含义>
///</returns>


(4)标记补充列表


<c>	将文本设置为类似代码的字体
<code>	将一行或多行源代码或程序输出设置为某种字体
<example>	表示所含的是示例
<exception>	标识方法可能引发的异常
<include>	包括来自外部文件的 XML
<list>	创建列表或表
<para>	用于将结构添加到文本中
<param>	描述方法或构造函数的参数
<paramref>	确认某个单词是参数名
<permission>	描述成员的安全性和访问权限
<summary>	描述一种类型
<returns>	描述方法的返回值
<see>	指定链接
<seealso>	生成“请参见”项
<summary>	描述类型的成员
<value>	描述属性


### 2. 命名规范

C#命名规则是为了让整个程序代码统一以增强其可读性而设置的。每一个单位在开发一个软件之前都会编写一份编码规范的文档。

常用的命名方法有两种，一种是 Pascal 命名法（帕斯卡命名法），另一种是 Camel 命名法（驼峰命名法）。

Pascal 命名法是指每个单词的首字母大写；Camel 命名法是指第一个单词小写，从第二个单词开始每个单词的首字母大写。

(1)变量的命名规则
变量的命名  规则遵循 Camel 命名法，并尽量使用能描述变量作用的英文单词。例如存放学生姓名的变量可以定义成 name 或者 studentName 等。另外，变量名字也不建议过长， 最好是 1 个单词，最多不超过 3 个单词。

(2)常量的命名规则
为了与变量有所区分，通常将定义常量的单词的所有字母大写。例如定义求圆面积的 n 的值，可以将其定义成一个常量以保证在整个程序中使用的值是统一的，直接定义成 PI 即可。

(3)类的命名规则
类的命名规则遵循 Pascal 命名法，即每个单词的首字母大写。例如定义一个存放学生信息的类，可以定义成 Student。

(4)接口的命名规则
接口的命名规则也遵循 Pascal 命名法，但通常都是以 I 开头，并将其后面的每个单词的首字母大写。例如定义一个存放值比较操作的接口，可以将其命名为 ICompare。

(5)方法的命名规则
方法的命名遵循 Pascal 命名法，一般采用动词来命名。例如实现添加用户信息操作的方法，可以将其命名为 AddUser。
